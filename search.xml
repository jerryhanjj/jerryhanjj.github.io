<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Django</title>
      <link href="/2018/04/10/Django/"/>
      <url>/2018/04/10/Django/</url>
      <content type="html"><![CDATA[<h1 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h1><h2 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python-admin startproject ProjectName(<span class="name">mysite</span>)</span><br></pre></td></tr></table></figure><h2 id="创建项目的应用"><a href="#创建项目的应用" class="headerlink" title="创建项目的应用"></a>创建项目的应用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py startapp AppName(blog)</span></span><br></pre></td></tr></table></figure><h2 id="static静态文件路径"><a href="#static静态文件路径" class="headerlink" title="static静态文件路径"></a>static静态文件路径</h2><p><code>STATICFILES_DIRS</code> 是文件的绝对路径（物理路径）<br><code>STATIC_URL</code> 是路径的别名，引用文件时用的都是别名<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">settings.py</span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">'/static/'</span>    <span class="comment"># 相当于STATICFILES_DIRS的别名 方便项目的维护 在引用文件时只能用这个别名</span></span><br><span class="line"></span><br><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">"blog"</span>, <span class="string">"statics"</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="在视图文件中引用static文件-例如jQuery文件"><a href="#在视图文件中引用static文件-例如jQuery文件" class="headerlink" title="在视图文件中引用static文件,例如jQuery文件"></a>在视图文件中引用static文件,例如jQuery文件</h2><p>(推荐)方法一：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;script scr="&#123;% static 'jquery-3.3.1.min.js' %&#125;"&gt;&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p><p>方法二：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script scr=<span class="string">"/路径别名/文件名"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h2 id="URL分发"><a href="#URL分发" class="headerlink" title="URL分发"></a>URL分发</h2><p>在<strong>项目工程文件夹</strong>下的<code>settings.py</code>中引入<strong>应用</strong>的<code>URL</code>控制文件<code>urls.py</code>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'showtime/'</span>, views.show_time, name=<span class="string">'time'</span>),</span><br><span class="line">    path(<span class="string">'blog/'</span>, include(<span class="string">'blog.urls'</span>)),    <span class="comment"># 将符合格式的 URL 分发给 blog 应用的 url 控制器去处理</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在应用文件夹中<code>urls.py</code>中处理属于应用的请求,例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 2.0特性相关 利用正则表达式要用 re_path 函数</span></span><br><span class="line">    re_path(<span class="string">'article/(?P&lt;year&gt;\d&#123;4&#125;)$'</span>, views.article_year, name=<span class="string">'year'</span>),  <span class="comment"># ?P&lt;组名&gt;</span></span><br><span class="line">    re_path(<span class="string">'article/(?P&lt;year&gt;\d&#123;4&#125;)/(?P&lt;month&gt;\d&#123;2&#125;)$'</span>, views.article_year_month, name=<span class="string">'month'</span>),   </span><br><span class="line">    re_path(<span class="string">'article/(?P&lt;year&gt;\d&#123;4&#125;)/(?P&lt;month&gt;\d&#123;2&#125;)/(?P&lt;day&gt;\d&#123;2&#125;)$'</span>, views.article_year_month_day, name=<span class="string">'day'</span>),</span><br><span class="line"></span><br><span class="line">    re_path(<span class="string">'register'</span>, views.register, name=<span class="string">'reg'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>使用 <code>name=</code>参数，如果<strong>路径正则匹配</strong>发生修改，只要不改变<code>name=</code>参数，在网页代码中不必大量修改代码，获取的网址会自动更改</p>]]></content>
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> urls </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo博客搭建及优化（二）：添加代码折叠功能</title>
      <link href="/2018/04/05/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BC%98%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81%E6%8A%98%E5%8F%A0%E5%8A%9F%E8%83%BD/"/>
      <url>/2018/04/05/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BC%98%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81%E6%8A%98%E5%8F%A0%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<h2 id="添加代码折叠功能"><a href="#添加代码折叠功能" class="headerlink" title="添加代码折叠功能"></a>添加代码折叠功能</h2><h3 id="代码折叠效果展示"><a href="#代码折叠效果展示" class="headerlink" title="代码折叠效果展示"></a>代码折叠效果展示</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐</div></div><div class="fold"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(arg)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div></div><a id="more"></a><h3 id="在POST主文件中添加JS判断代码"><a href="#在POST主文件中添加JS判断代码" class="headerlink" title="在POST主文件中添加JS判断代码"></a>在POST主文件中添加JS判断代码</h3><p>在<code>/themes/next/source/js/src/post-details.js</code>中添加一下代码，可以在文件开头添加即可：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="string">'.fold_hider'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">'&gt;.fold'</span>, <span class="keyword">this</span>.parentNode).slideToggle();</span><br><span class="line">        $(<span class="string">'&gt;:first'</span>, <span class="keyword">this</span>).toggleClass(<span class="string">'open'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//默认情况下展开</span></span><br><span class="line">    $(<span class="string">"div.fold"</span>).css(<span class="string">"display"</span>,<span class="string">"open"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="定义内建标签"><a href="#定义内建标签" class="headerlink" title="定义内建标签"></a>定义内建标签</h3><p>在<code>/themes/next/scripts/</code>中新建文件 <code>tags.js</code>并添加如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @haohuawu</span></span><br><span class="line"><span class="comment">  修复 Nunjucks 的 tag 里写 ```代码块```，最终都会渲染成 undefined 的问题</span></span><br><span class="line"><span class="comment">  https://github.com/hexojs/hexo/issues/2400</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> rEscapeContent = <span class="regexp">/&lt;escape(?:[^&gt;]*)&gt;([\s\S]*?)&lt;\/escape&gt;/g</span>;</span><br><span class="line"><span class="keyword">const</span> placeholder = <span class="string">'\uFFFD'</span>;</span><br><span class="line"><span class="keyword">const</span> rPlaceholder = <span class="regexp">/(?:&lt;|&amp;lt;)\!--\uFFFD(\d+)--(?:&gt;|&amp;gt;)/g</span>;</span><br><span class="line"><span class="keyword">const</span> cache = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapeContent</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;!--'</span> + placeholder + (cache.push(str) - <span class="number">1</span>) + <span class="string">'--&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line">hexo.extend.filter.register(<span class="string">'before_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  data.content = data.content.replace(rEscapeContent, <span class="function"><span class="keyword">function</span>(<span class="params">match, content</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> escapeContent(content);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  data.content = data.content.replace(rPlaceholder, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cache[<span class="built_in">arguments</span>[<span class="number">1</span>]];</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在同一目录下新建文件<code>fold.js</code>添加如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* global hexo */</span></span><br><span class="line"><span class="comment">// Usage: &#123;% fold ???? %&#125; Something &#123;% endfold %&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fold</span> (<span class="params">args, content</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text = args[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(!text) text = <span class="string">"点击显/隐"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;div&gt;&lt;div class="fold_hider"&gt;&lt;div class="close hider_title"&gt;'</span> + text + <span class="string">'&lt;/div&gt;&lt;/div&gt;&lt;div class="fold"&gt;\n'</span> + hexo.render.renderSync(&#123;<span class="attr">text</span>: content, <span class="attr">engine</span>: <span class="string">'markdown'</span>&#125;) + <span class="string">'\n&lt;/div&gt;&lt;/div&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line">hexo.extend.tag.register(<span class="string">'fold'</span>, fold, &#123;<span class="attr">ends</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="添加折叠功能样式"><a href="#添加折叠功能样式" class="headerlink" title="添加折叠功能样式"></a>添加折叠功能样式</h3><p>在<code>/themes/next/soure/css/_custom/custom.styl</code>添加如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Custom styles.</span></span><br><span class="line">.hider_title&#123;</span><br><span class="line">    font-family: <span class="string">"Microsoft Yahei"</span>;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">.close:after&#123;</span><br><span class="line">    content: <span class="string">"▼"</span>;</span><br><span class="line">&#125;</span><br><span class="line">.open:after&#123;</span><br><span class="line">    content: <span class="string">"▲"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.feed-link a &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">fold</span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">你需要折叠的内容</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">endfold</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://blog.rmiao.top/hexo-fold-block/" target="_blank" rel="noopener">Ryan Miao. Hexo next博客添加折叠块功能添加折叠代码块</a></li><li>[2] <a href="https://www.oyohyee.com/post/Note/fold" target="_blank" rel="noopener">Oh!Yee. jQuery 实现内容折叠功能</a></li></ul>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 主题优化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo博客搭建及优化（一）：Hexo+Next+VPS搭建博客并部署</title>
      <link href="/2018/04/01/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AHexo-Next-VPS%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2/"/>
      <url>/2018/04/01/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AHexo-Next-VPS%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> vps </tag>
            
            <tag> Next </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git、GitHub项目常用操作命令指南</title>
      <link href="/2018/01/07/Git%E3%80%81GitHub%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E6%8C%87%E5%8D%97/"/>
      <url>/2018/01/07/Git%E3%80%81GitHub%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<ul><li>Git常用命令介绍<ul><li>仓库初始化及基本操作</li><li>版本回退</li><li>克隆</li><li>分支管理</li><li>多人协作<a id="more"></a></li></ul></li></ul><h2 id="Git-常用命令操作教程-附Git中文官方操作指南"><a href="#Git-常用命令操作教程-附Git中文官方操作指南" class="headerlink" title="Git 常用命令操作教程 [附Git中文官方操作指南]"></a>Git 常用命令操作教程 [附Git中文官方操作指南]</h2><ul><li><p><strong>强烈建议</strong><br>  建议大家亲手查看<a href="https://git-scm.com/book/zh/v2" title="官方操作指南" target="_blank" rel="noopener">Git中文官方操作指南</a>，还有 PDF 和 电子书 可以下载！</p></li><li><p><strong>主要用途</strong><br>  团队合作和版本控制  </p></li><li><p><strong>安装</strong><br>  <code>window</code> 系统直接从Git官网下载<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">安装程序</a><br>  使用 <code>Git</code> 获取升级：<br>  <code>$ git clone git://git.kernel.org/pub/scm/git/git.git</code></p></li><li><p><strong>常用命令</strong>  </p><ul><li><code>git init</code> 初始化文件夹，出现隐藏文件夹 <code>.git</code>  </li><li><code>git add &lt;files&gt;</code> 将更改的文件添加到待提交的状态  </li><li><code>git commit -m &#39;xxx&#39;</code> 提交被修改过的文件到仓库  给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 <code>git add</code> 步骤</li><li><code>git status</code> 获取当前 <code>repository</code> 的状态（是否有修改等）  </li><li><code>git diff</code> 查看工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。</li><li><code>git diff --cached</code> 查看已暂存的将要添加到下次提交里的内容（已暂存和已提交的不同）</li><li><code>git log -p -2</code> 查看提交记录、<code>commit id</code> 以便在版本回退时使用, -p 显示每次提交差异 -2 最近两次提交 <code>git log -pretty=oneline</code> 简化输出信息  </li><li><code>git relog</code> 记录每次提交的<strong>命令</strong>，可以通过这个记录回到最新的版本 </li><li><strong>版本回退</strong><ul><li><code>git reset --hard HEAD^</code>  <blockquote><p><strong>参数</strong>：HEAD^ 上个版本，HEAD^^ 上上个版本，前N个版本 HEAD~N<br>如果因为误操作或者其他原因需要<strong>再次回到最新版本</strong>，则需要 <code>commit id</code> 上场了：<code>git reset --hard commit_id</code><br>根据 <code>git log</code> 或者 <code>git reflog</code> 得到的 <code>commit id</code> 在不同版本间切换  </p></blockquote></li></ul></li><li><code>git diff HEAD -- 文件名</code> 查看当前工作区和版本库中的 某文件 有什么不同  </li><li><code>git checkout -- file</code> 撤销修改，回到最近一次 commit 或者 add 时的状态  </li><li><code>git reset HEAD file</code> 将暂存区的修改回退到工作区  </li><li><code>git rm file</code> 删除文件</li><li><p><strong>…Or create a new repository on the command line</strong>  </p><pre><code>echo &quot;# gittest&quot; &gt;&gt; README.md  git init  git add README.md  git commit -m &quot;first commit&quot;  git remote add origin git@github.com:youraccount/yourprojectname.git  （如果出现错误 fatal: remote origin already exists , 则 git remote rm origin 再执行上条命令）git push -u origin master  参数说明：-u ：由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支           内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送           或者拉取时就可以简化命令，使用 git push origin master 即可。           master： 推送 master 分支</code></pre></li><li><p><strong>…Or push an existing repository from the command line</strong>  </p><pre><code>git remote add origin git@github.com:youraccount/yourprojectname.gitgit push -u origin master  </code></pre></li><li><p><strong>克隆仓库</strong>  </p><pre><code>$ git clone git@github.com:jerryhanjj/gittest.gitCloning into &apos;gittest&apos;...remote: Counting objects: 3, done.remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0Receiving objects: 100% (3/3), done.  </code></pre></li></ul></li></ul><pre><code>* **分支管理****[一个很神奇的东西]**      * 创建分支名 `git branch 分支名`    * 切换分支   `git checkout 分支名`    * 一步到位（创建并切换） `git checkout -b 分支名`     * 合并分支 `git merge 分支名` 如果遇到合并冲突，需要手动解决        * `$ git merge --no-ff -m &quot;提交信息&quot; 分支名` 禁用 `Fast forward` 合并模式，可以保留历史分支信息      * 删除分支 `git branch -d 分支名`，若该分支未被合并则报错，`-D` 强制删除    * `git branch `          * `-v` 最后一次提交信息        * `-vv` 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。        * `--merged` 已被合并的分支（可以删除）        * `--no-merged` 未被合并分支    * `$ git log --graph --pretty=oneline --abbrev-commit` 查看分支合并图              $ git log --graph --pretty=oneline --abbrev-commit            *   916eac9 (HEAD -&gt; master) merge dev with no-ff            |\            | * 1a1f2f3 change pro on dev            |/            * ff89d5e fz            * a146f81 (origin/master, origin/HEAD) add pro.md            * bfca575 remove project.md            * 0e79ea5 project.md            * 4ce4618 project.md            * ec0e6db first commit* **多人协作**    * 创建 dev 等分支进行开发    * 把 dev 分支 push 到远程（GitHub） dev 分支上。如果推送失败，出现 冲突 先用git pull把最新的提交从 dev 抓下来，然后，在本地合并，解决冲突，再推送。    * 再由 dev 推到 master 主分支上</code></pre>]]></content>
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git上传文件、文件夹、项目到Github</title>
      <link href="/2017/05/27/Git%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E3%80%81%E6%96%87%E4%BB%B6%E5%A4%B9%E3%80%81%E9%A1%B9%E7%9B%AE%E5%88%B0Github/"/>
      <url>/2017/05/27/Git%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E3%80%81%E6%96%87%E4%BB%B6%E5%A4%B9%E3%80%81%E9%A1%B9%E7%9B%AE%E5%88%B0Github/</url>
      <content type="html"><![CDATA[<p>摘要：  </p><ul><li>配置git/SSH</li><li>建仓</li><li>克隆</li><li>上传项目<code>push</code></li></ul><a id="more"></a><p>#<strong>Git 上传文件、文件夹或项目到 Github</strong></p><ul><li><p><a href="https://git-scm.com/book/zh/v2" title="git基础知识学习" target="_blank" rel="noopener">Git 基础知识学习</a></p></li><li><p><strong>配置Git、SSH</strong></p><ul><li>下载、安装 Git</li><li><p>绑定用户  </p><p>  <code>$ git config --global user.name &quot;Your Name&quot;</code><br>  <code>$ git config --global user.email &quot;email@example.com&quot;</code></p></li><li><p>配置 SSH</p></li></ul></li></ul><blockquote><p><strong>1、</strong>在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开GitBash），创建SSH Key，密码可以不设置直接回车</p></blockquote><pre><code>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code></pre><blockquote><p>如果一切顺利的话，可以在用户主目录里找到 <code>.ssh</code> 目录，里面有 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件，这两个就是<code>SSH Key</code> 的秘钥对，<strong>id_rsa 是私钥，不能泄露出去</strong>，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。用记事本打开 <code>id_rsa.pub</code>（<code>C:\Users\Administrator\.ssh</code>），得到ssh key 公钥。  </p></blockquote><blockquote><p><strong>2、</strong>为 Github 账户添加 ssh key 。登录 Github，展开个人头像的小三角，点<code>settings</code>，然后打开<code>SSH keys</code>菜单，点击<code>Add SSH key</code>新增密钥，填上标题。</p></blockquote><ul><li><strong>建立仓库</strong></li></ul><blockquote><p>填一下仓库名称，Initialize this repository with a README是可选的，<strong>建议在创建时选上</strong>，可以在后面省一个步骤。填好之后，点Create repository完成仓库的建立</p></blockquote><ul><li><strong>克隆仓库</strong></li></ul><blockquote><p><strong>如果是全新的项目没有任何文件，也可以不用克隆仓库，跳过这一步。</strong>点开 Git Shell，进入命令行。首先我们先要把 GitHub 上的我们新建的仓库 clone下来。在初始化版本库之前，先要确认认证的公钥是否正确</p></blockquote><pre><code>$ ssh -T git@github.com</code></pre><blockquote><p>如果收到成功的确认消息，就可以开始克隆远程仓库了（以我的一个项目为例）</p></blockquote><pre><code>$ git clone https://github.com/jerryhanjj/baike_spider.git</code></pre><blockquote><p>远程仓库的地址可以在自己的 <code>Github</code> 项目上找到（以我的为例）</p></blockquote><p><img src="http://i.imgur.com/ndADEqn.jpg" alt="获取远程仓库地址"></p><blockquote><p>克隆仓库之后就在文件夹中出现了项目文件夹及文件,进入项目文件夹，对其进行初始化</p></blockquote><pre><code>$ git init</code></pre><ul><li><strong>上传 README 文件</strong></li></ul><blockquote><p>如果在创建 <code>Github</code> 仓库时没有勾选创建 <code>README.md</code> 文件，则要先创建 <code>README.md</code> 文件，不然上传文件会报错。如果已经勾选，可以跳过此步骤。</p></blockquote><pre><code>$ git init$ touch README.md$ git add README.md$ git commit -m &apos;first_commit&apos;$ git remote add origin https://github.com/jerryhanjj/baike_spider.git$ git push origin master</code></pre><ul><li><strong>上传项目</strong></li></ul><blockquote><p>跟踪项目文件夹中的所有文件和文件夹</p></blockquote><pre><code>$ git add . </code></pre><blockquote><p>输入本次的提交说明，准备提交暂存区中的更改的已跟踪文件，单引号内为说明内容</p></blockquote><pre><code>$ git commit -m &apos;first_commit&apos;</code></pre><blockquote><p>关联远程仓库，添加后，远程库的名字就是 <code>origin</code>，这是 <code>Git</code> 默认的叫法，也可以改成别的，但是 <code>origin</code> 这个名字一看就知道是远程库。</p></blockquote><pre><code>$ git remote add origin https://github.com/jerryhanjj/baike_spider.git</code></pre><blockquote><p>如果关联出现错误 <code>fatal: remote origin already exists</code>，则执行下列语句再进行关联</p></blockquote><pre><code>git remote rm origin</code></pre><blockquote><p>把本地库的所有内容推送到远程库上</p></blockquote><pre><code>$ git push -u origin master</code></pre><blockquote><p>如果在推送时出现错误 <code>error:failed to push som refs to.......</code>，则执行下列语句</p></blockquote><pre><code>git pull origin master</code></pre><blockquote><p>将远程仓库 <code>Github</code> 上的文件拉下来合并之后重新推送上去</p></blockquote>]]></content>
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pyton-socket编程示例</title>
      <link href="/2017/04/03/pyton-socket%E7%BC%96%E7%A8%8B%E7%A4%BA%E4%BE%8B/"/>
      <url>/2017/04/03/pyton-socket%E7%BC%96%E7%A8%8B%E7%A4%BA%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h1 id="SOCKET编程简单示例"><a href="#SOCKET编程简单示例" class="headerlink" title="SOCKET编程简单示例"></a>SOCKET编程简单示例</h1><h2 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h2><ul><li>python版本3.5.1</li><li>客户端连接服务器，server发送欢迎词并询问用户姓名，收到client回复，向client发送<code>hello，***</code></li><li>client向server发送数据，server打印收到的数据</li><li>用线程处理多客户端连接</li></ul><a id="more"></a><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><ul><li>demo_socket_client.py</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐</div></div><div class="fold"><figure class="highlight python"><figcaption><span>demo_socket_client.py</span><a href="https://github.com/jerryhanjj/socket_demo/blob/master/demo_socket_client.py">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># client</span></span><br><span class="line">client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class="comment">#AF_INET（IPV4使用） SOCK_STREAM（TCP模式）</span></span><br><span class="line"></span><br><span class="line">client.connect((<span class="string">'localhost'</span>, <span class="number">8080</span>))         <span class="comment">#连接本地回环地址127.0.0.1 端口号8080 以元组作为参数</span></span><br><span class="line"></span><br><span class="line">print(client.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    sendbuf = input()                      <span class="comment"># 输入</span></span><br><span class="line">    client.send(sendbuf.encode(<span class="string">'utf-8'</span>))   <span class="comment"># UTF-8编码</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> sendbuf <span class="keyword">or</span> sendbuf == <span class="string">'exit'</span>:   <span class="comment">#退出条件判断</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    recvbuf = client.recv(<span class="number">1024</span>)</span><br><span class="line">    print(recvbuf.decode(<span class="string">'utf-8'</span>))        <span class="comment"># 解码</span></span><br><span class="line">client.close()                            <span class="comment"># 断开连接</span></span><br><span class="line">print(<span class="string">'Connection was closed...'</span>)</span><br></pre></td></tr></table></figure></div></div><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><ul><li>demo_socket_server.py</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐</div></div><div class="fold"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">ser = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">ser.bind((<span class="string">'127.0.0.1'</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line">ser.listen(<span class="number">5</span>)               <span class="comment"># 监听连接 如果有超过5个连接请求，从第6个开始不会被accept</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'Server is running...'</span>)       <span class="comment"># 打印运行提示</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tcplink</span><span class="params">(connect, addr)</span>:</span></span><br><span class="line">    print(<span class="string">'Accept new connection from %s:%s...'</span> % addr)</span><br><span class="line">    connect.send(<span class="string">b'Welcome!\r\n'</span>+<span class="string">b'Please tell me your name:'</span>)</span><br><span class="line">    data = connect.recv(<span class="number">1024</span>)</span><br><span class="line">    connect.send((<span class="string">'Hello, %s'</span> % data.decode(<span class="string">'utf-8'</span>)).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = connect.recv(<span class="number">1024</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data <span class="keyword">or</span> data.decode(<span class="string">'utf-8'</span>) == <span class="string">'exit'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(<span class="string">"Device: %s, Data: %s, Size: %s"</span> % (addr[<span class="number">0</span>], data.decode(<span class="string">'utf-8'</span>), len(data)))</span><br><span class="line">        connect.send(<span class="string">b'Data Receive'</span>)</span><br><span class="line">    connect.close()</span><br><span class="line">    print(<span class="string">'Connection from %s:%s closed'</span> % addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    sock, addr = ser.accept()</span><br><span class="line">    pthread = threading.Thread(target=tcplink, args=(sock, addr))   <span class="comment">#多线程处理socket连接</span></span><br><span class="line">    pthread.start()</span><br></pre></td></tr></table></figure></div></div>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Qt 隐藏标题栏 窗口移动 鼠标事件</title>
      <link href="/2017/04/01/Qt-%E9%9A%90%E8%97%8F%E6%A0%87%E9%A2%98%E6%A0%8F-%E7%AA%97%E5%8F%A3%E7%A7%BB%E5%8A%A8-%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6/"/>
      <url>/2017/04/01/Qt-%E9%9A%90%E8%97%8F%E6%A0%87%E9%A2%98%E6%A0%8F-%E7%AA%97%E5%8F%A3%E7%A7%BB%E5%8A%A8-%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<ul><li>摘要<ul><li>隐藏标题栏</li><li>头文件声明鼠标移动虚函数</li><li>.cpp文件实现功能</li></ul></li></ul><a id="more"></a><h1 id="隐藏标题栏"><a href="#隐藏标题栏" class="headerlink" title="隐藏标题栏"></a>隐藏标题栏</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setWindowFlags(Qt::FramelessWindowHint | windowFlags());</span><br></pre></td></tr></table></figure><h1 id="无标题栏移动窗体的实现"><a href="#无标题栏移动窗体的实现" class="headerlink" title="无标题栏移动窗体的实现"></a>无标题栏移动窗体的实现</h1><h2 id="头文件声明虚函数"><a href="#头文件声明虚函数" class="headerlink" title="头文件声明虚函数"></a>头文件声明虚函数</h2><ul><li><em>widget.h</em></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> WIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;a.out.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Widget</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~Widget();</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mousePressEvent</span><span class="params">(QMouseEvent *event)</span></span>;       <span class="comment">// 鼠标按下</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QMouseEvent *event)</span></span>;        <span class="comment">// 移动</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mouseReleaseEvent</span><span class="params">(QMouseEvent *event)</span></span>;     <span class="comment">// 鼠标释放</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line">    <span class="keyword">bool</span> m_pressed;       <span class="comment">// 判断鼠标左键是否按下</span></span><br><span class="line">    QPoint m_pos;         <span class="comment">// 鼠标相对于窗口的位置，不是相对屏幕的位置</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// WIDGET_H</span></span></span><br></pre></td></tr></table></figure><h2 id="头文件实现虚函数"><a href="#头文件实现虚函数" class="headerlink" title="头文件实现虚函数"></a>头文件实现虚函数</h2><ul><li><em>widget.cpp</em></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Widget::mousePressEvent(QMouseEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (event-&gt;button() == Qt::LeftButton)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pressed = <span class="literal">true</span>;</span><br><span class="line">        m_pos = event-&gt;pos();     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Widget::mouseMoveEvent(QMouseEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(m_pressed)</span><br><span class="line">    &#123;</span><br><span class="line">        move(event-&gt;pos() - m_pos + <span class="keyword">this</span>-&gt;pos());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Widget::mouseReleaseEvent(QMouseEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    Q_UNUSED(event);            <span class="comment">// avoid the warnning that 'event' is unused while building the project</span></span><br><span class="line"></span><br><span class="line">    m_pressed = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鼠标事件 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
