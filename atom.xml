<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jerry&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jerryhanjj.com/"/>
  <updated>2018-04-03T14:30:35.775Z</updated>
  <id>http://jerryhanjj.com/</id>
  
  <author>
    <name>JerryHan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git、GitHub项目常用操作命令指南</title>
    <link href="http://jerryhanjj.com/2018/04/03/Git%E3%80%81GitHub%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E6%8C%87%E5%8D%97/"/>
    <id>http://jerryhanjj.com/2018/04/03/Git、GitHub项目常用操作命令指南/</id>
    <published>2018-04-03T12:04:05.000Z</published>
    <updated>2018-04-03T14:30:35.775Z</updated>
    
    <content type="html"><![CDATA[<p>摘要<br><a id="more"></a><br>全文</p><h2 id="Git-常用命令操作教程-附Git中文官方操作指南"><a href="#Git-常用命令操作教程-附Git中文官方操作指南" class="headerlink" title="Git 常用命令操作教程 [附Git中文官方操作指南]"></a>Git 常用命令操作教程 [附Git中文官方操作指南]</h2><ul><li><p><strong>强烈建议</strong><br>  建议大家亲手查看<a href="https://git-scm.com/book/zh/v2" title="官方操作指南" target="_blank" rel="noopener">Git中文官方操作指南</a>，还有 PDF 和 电子书 可以下载！</p></li><li><p><strong>主要用途</strong><br>  团队合作和版本控制  </p></li><li><p><strong>安装</strong><br>  <code>window</code> 系统直接从Git官网下载<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">安装程序</a><br>  使用 <code>Git</code> 获取升级：<br>  <code>$ git clone git://git.kernel.org/pub/scm/git/git.git</code></p></li><li><p><strong>常用命令</strong>  </p><ul><li><code>git init</code> 初始化文件夹，出现隐藏文件夹 <code>.git</code>  </li><li><code>git add &lt;files&gt;</code> 将更改的文件添加到待提交的状态  </li><li><code>git commit -m &#39;xxx&#39;</code> 提交被修改过的文件到仓库  给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 <code>git add</code> 步骤</li><li><code>git status</code> 获取当前 <code>repository</code> 的状态（是否有修改等）  </li><li><code>git diff</code> 查看工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。</li><li><code>git diff --cached</code> 查看已暂存的将要添加到下次提交里的内容（已暂存和已提交的不同）</li><li><code>git log -p -2</code> 查看提交记录、<code>commit id</code> 以便在版本回退时使用, -p 显示每次提交差异 -2 最近两次提交 <code>git log -pretty=oneline</code> 简化输出信息  </li><li><code>git relog</code> 记录每次提交的<strong>命令</strong>，可以通过这个记录回到最新的版本 </li><li><strong>版本回退</strong><ul><li><code>git reset --hard HEAD^</code>  <blockquote><p><strong>参数</strong>：HEAD^ 上个版本，HEAD^^ 上上个版本，前N个版本 HEAD~N<br>如果因为误操作或者其他原因需要<strong>再次回到最新版本</strong>，则需要 <code>commit id</code> 上场了：<code>git reset --hard commit_id</code><br>根据 <code>git log</code> 或者 <code>git reflog</code> 得到的 <code>commit id</code> 在不同版本间切换  </p></blockquote></li></ul></li><li><code>git diff HEAD -- 文件名</code> 查看当前工作区和版本库中的 某文件 有什么不同  </li><li><code>git checkout -- file</code> 撤销修改，回到最近一次 commit 或者 add 时的状态  </li><li><code>git reset HEAD file</code> 将暂存区的修改回退到工作区  </li><li><code>git rm file</code> 删除文件</li><li><p><strong>…Or create a new repository on the command line</strong>  </p><pre><code>echo &quot;# gittest&quot; &gt;&gt; README.md  git init  git add README.md  git commit -m &quot;first commit&quot;  git remote add origin git@github.com:youraccount/yourprojectname.git  （如果出现错误 fatal: remote origin already exists , 则 git remote rm origin 再执行上条命令）git push -u origin master  参数说明：-u ：由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支           内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送           或者拉取时就可以简化命令，使用 git push origin master 即可。           master： 推送 master 分支</code></pre></li><li><p><strong>…Or push an existing repository from the command line</strong>  </p><pre><code>git remote add origin git@github.com:youraccount/yourprojectname.gitgit push -u origin master  </code></pre></li><li><p><strong>克隆仓库</strong>  </p><pre><code>$ git clone git@github.com:jerryhanjj/gittest.gitCloning into &apos;gittest&apos;...remote: Counting objects: 3, done.remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0Receiving objects: 100% (3/3), done.  </code></pre></li><li><p><strong>分支管理**</strong>[一个很神奇的东西]**  </p><ul><li>创建分支名 <code>git branch 分支名</code></li><li>切换分支   <code>git checkout 分支名</code></li><li>一步到位（创建并切换） <code>git checkout -b 分支名</code> </li><li>合并分支 <code>git merge 分支名</code> 如果遇到合并冲突，需要手动解决<ul><li><code>$ git merge --no-ff -m &quot;提交信息&quot; 分支名</code> 禁用 <code>Fast forward</code> 合并模式，可以保留历史分支信息  </li></ul></li><li>删除分支 <code>git branch -d 分支名</code>，若该分支未被合并则报错，<code>-D</code> 强制删除</li><li><code>git branch</code>  <ul><li><code>-v</code> 最后一次提交信息</li><li><code>-vv</code> 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。</li><li><code>--merged</code> 已被合并的分支（可以删除）</li><li><code>--no-merged</code> 未被合并分支</li></ul></li><li><p><code>$ git log --graph --pretty=oneline --abbrev-commit</code> 查看分支合并图  </p><pre><code>$ git log --graph --pretty=oneline --abbrev-commit*   916eac9 (HEAD -&gt; master) merge dev with no-ff|\| * 1a1f2f3 change pro on dev|/* ff89d5e fz* a146f81 (origin/master, origin/HEAD) add pro.md* bfca575 remove project.md* 0e79ea5 project.md* 4ce4618 project.md* ec0e6db first commit</code></pre></li></ul></li><li><strong>多人协作</strong><ul><li>创建 dev 等分支进行开发</li><li>把 dev 分支 push 到远程（GitHub） dev 分支上。如果推送失败，出现 冲突 先用git pull把最新的提交从 dev 抓下来，然后，在本地合并，解决冲突，再推送。</li><li>再由 dev 推到 master 主分支上</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://jerryhanjj.com/categories/Git/"/>
    
    
      <category term="git" scheme="http://jerryhanjj.com/tags/git/"/>
    
      <category term="github" scheme="http://jerryhanjj.com/tags/github/"/>
    
  </entry>
  
</feed>
