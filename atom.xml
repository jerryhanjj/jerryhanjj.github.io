<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jerry&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jerryhanjj.com/"/>
  <updated>2018-04-04T08:17:59.526Z</updated>
  <id>http://jerryhanjj.com/</id>
  
  <author>
    <name>JerryHan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git、GitHub项目常用操作命令指南</title>
    <link href="http://jerryhanjj.com/2018/01/07/Git%E3%80%81GitHub%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E6%8C%87%E5%8D%97/"/>
    <id>http://jerryhanjj.com/2018/01/07/Git、GitHub项目常用操作命令指南/</id>
    <published>2018-01-07T12:04:05.000Z</published>
    <updated>2018-04-04T08:17:59.526Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Git常用命令介绍<ul><li>仓库初始化及基本操作</li><li>版本回退</li><li>克隆</li><li>分支管理</li><li>多人协作<a id="more"></a></li></ul></li></ul><h2 id="Git-常用命令操作教程-附Git中文官方操作指南"><a href="#Git-常用命令操作教程-附Git中文官方操作指南" class="headerlink" title="Git 常用命令操作教程 [附Git中文官方操作指南]"></a>Git 常用命令操作教程 [附Git中文官方操作指南]</h2><ul><li><p><strong>强烈建议</strong><br>  建议大家亲手查看<a href="https://git-scm.com/book/zh/v2" title="官方操作指南" target="_blank" rel="noopener">Git中文官方操作指南</a>，还有 PDF 和 电子书 可以下载！</p></li><li><p><strong>主要用途</strong><br>  团队合作和版本控制  </p></li><li><p><strong>安装</strong><br>  <code>window</code> 系统直接从Git官网下载<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">安装程序</a><br>  使用 <code>Git</code> 获取升级：<br>  <code>$ git clone git://git.kernel.org/pub/scm/git/git.git</code></p></li><li><p><strong>常用命令</strong>  </p><ul><li><code>git init</code> 初始化文件夹，出现隐藏文件夹 <code>.git</code>  </li><li><code>git add &lt;files&gt;</code> 将更改的文件添加到待提交的状态  </li><li><code>git commit -m &#39;xxx&#39;</code> 提交被修改过的文件到仓库  给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 <code>git add</code> 步骤</li><li><code>git status</code> 获取当前 <code>repository</code> 的状态（是否有修改等）  </li><li><code>git diff</code> 查看工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。</li><li><code>git diff --cached</code> 查看已暂存的将要添加到下次提交里的内容（已暂存和已提交的不同）</li><li><code>git log -p -2</code> 查看提交记录、<code>commit id</code> 以便在版本回退时使用, -p 显示每次提交差异 -2 最近两次提交 <code>git log -pretty=oneline</code> 简化输出信息  </li><li><code>git relog</code> 记录每次提交的<strong>命令</strong>，可以通过这个记录回到最新的版本 </li><li><strong>版本回退</strong><ul><li><code>git reset --hard HEAD^</code>  <blockquote><p><strong>参数</strong>：HEAD^ 上个版本，HEAD^^ 上上个版本，前N个版本 HEAD~N<br>如果因为误操作或者其他原因需要<strong>再次回到最新版本</strong>，则需要 <code>commit id</code> 上场了：<code>git reset --hard commit_id</code><br>根据 <code>git log</code> 或者 <code>git reflog</code> 得到的 <code>commit id</code> 在不同版本间切换  </p></blockquote></li></ul></li><li><code>git diff HEAD -- 文件名</code> 查看当前工作区和版本库中的 某文件 有什么不同  </li><li><code>git checkout -- file</code> 撤销修改，回到最近一次 commit 或者 add 时的状态  </li><li><code>git reset HEAD file</code> 将暂存区的修改回退到工作区  </li><li><code>git rm file</code> 删除文件</li><li><p><strong>…Or create a new repository on the command line</strong>  </p><pre><code>echo &quot;# gittest&quot; &gt;&gt; README.md  git init  git add README.md  git commit -m &quot;first commit&quot;  git remote add origin git@github.com:youraccount/yourprojectname.git  （如果出现错误 fatal: remote origin already exists , 则 git remote rm origin 再执行上条命令）git push -u origin master  参数说明：-u ：由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支           内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送           或者拉取时就可以简化命令，使用 git push origin master 即可。           master： 推送 master 分支</code></pre></li><li><p><strong>…Or push an existing repository from the command line</strong>  </p><pre><code>git remote add origin git@github.com:youraccount/yourprojectname.gitgit push -u origin master  </code></pre></li><li><p><strong>克隆仓库</strong>  </p><pre><code>$ git clone git@github.com:jerryhanjj/gittest.gitCloning into &apos;gittest&apos;...remote: Counting objects: 3, done.remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0Receiving objects: 100% (3/3), done.  </code></pre></li></ul></li></ul><pre><code>* **分支管理****[一个很神奇的东西]**      * 创建分支名 `git branch 分支名`    * 切换分支   `git checkout 分支名`    * 一步到位（创建并切换） `git checkout -b 分支名`     * 合并分支 `git merge 分支名` 如果遇到合并冲突，需要手动解决        * `$ git merge --no-ff -m &quot;提交信息&quot; 分支名` 禁用 `Fast forward` 合并模式，可以保留历史分支信息      * 删除分支 `git branch -d 分支名`，若该分支未被合并则报错，`-D` 强制删除    * `git branch `          * `-v` 最后一次提交信息        * `-vv` 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。        * `--merged` 已被合并的分支（可以删除）        * `--no-merged` 未被合并分支    * `$ git log --graph --pretty=oneline --abbrev-commit` 查看分支合并图              $ git log --graph --pretty=oneline --abbrev-commit            *   916eac9 (HEAD -&gt; master) merge dev with no-ff            |\            | * 1a1f2f3 change pro on dev            |/            * ff89d5e fz            * a146f81 (origin/master, origin/HEAD) add pro.md            * bfca575 remove project.md            * 0e79ea5 project.md            * 4ce4618 project.md            * ec0e6db first commit* **多人协作**    * 创建 dev 等分支进行开发    * 把 dev 分支 push 到远程（GitHub） dev 分支上。如果推送失败，出现 冲突 先用git pull把最新的提交从 dev 抓下来，然后，在本地合并，解决冲突，再推送。    * 再由 dev 推到 master 主分支上</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Git常用命令介绍&lt;ul&gt;
&lt;li&gt;仓库初始化及基本操作&lt;/li&gt;
&lt;li&gt;版本回退&lt;/li&gt;
&lt;li&gt;克隆&lt;/li&gt;
&lt;li&gt;分支管理&lt;/li&gt;
&lt;li&gt;多人协作
    
    </summary>
    
      <category term="Git" scheme="http://jerryhanjj.com/categories/Git/"/>
    
    
      <category term="git" scheme="http://jerryhanjj.com/tags/git/"/>
    
      <category term="github" scheme="http://jerryhanjj.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>开源许可协议类别及使用条件</title>
    <link href="http://jerryhanjj.com/2017/06/07/%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE%E7%B1%BB%E5%88%AB%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%9D%A1%E4%BB%B6/"/>
    <id>http://jerryhanjj.com/2017/06/07/开源许可协议类别及使用条件/</id>
    <published>2017-06-07T09:12:46.000Z</published>
    <updated>2018-04-04T09:23:14.779Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/06/07/开源许可协议类别及使用条件/1.png" title="开源许可协议区别">  <a id="more"></a><img src="/2017/06/07/开源许可协议类别及使用条件/2.png" title="使用条件">  <img src="/2017/06/07/开源许可协议类别及使用条件/3.png" title="协议使用流程导图">]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/06/07/开源许可协议类别及使用条件/1.png&quot; title=&quot;开源许可协议区别&quot;&gt;
    
    </summary>
    
      <category term="Others" scheme="http://jerryhanjj.com/categories/Others/"/>
    
    
      <category term="OpenSource" scheme="http://jerryhanjj.com/tags/OpenSource/"/>
    
      <category term="开源" scheme="http://jerryhanjj.com/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="协议" scheme="http://jerryhanjj.com/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>Git上传文件、文件夹、项目到Github</title>
    <link href="http://jerryhanjj.com/2017/05/27/Git%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E3%80%81%E6%96%87%E4%BB%B6%E5%A4%B9%E3%80%81%E9%A1%B9%E7%9B%AE%E5%88%B0Github/"/>
    <id>http://jerryhanjj.com/2017/05/27/Git上传文件、文件夹、项目到Github/</id>
    <published>2017-05-27T08:29:07.000Z</published>
    <updated>2018-04-04T08:42:53.649Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：  </p><ul><li>配置git/SSH</li><li>建仓</li><li>克隆</li><li>上传项目<code>push</code></li></ul><a id="more"></a><p>#<strong>Git 上传文件、文件夹或项目到 Github</strong></p><ul><li><p><a href="https://git-scm.com/book/zh/v2" title="git基础知识学习" target="_blank" rel="noopener">Git 基础知识学习</a></p></li><li><p><strong>配置Git、SSH</strong></p><ul><li>下载、安装 Git</li><li><p>绑定用户  </p><p>  <code>$ git config --global user.name &quot;Your Name&quot;</code><br>  <code>$ git config --global user.email &quot;email@example.com&quot;</code></p></li><li><p>配置 SSH</p></li></ul></li></ul><blockquote><p><strong>1、</strong>在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开GitBash），创建SSH Key，密码可以不设置直接回车</p></blockquote><pre><code>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code></pre><blockquote><p>如果一切顺利的话，可以在用户主目录里找到 <code>.ssh</code> 目录，里面有 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件，这两个就是<code>SSH Key</code> 的秘钥对，<strong>id_rsa 是私钥，不能泄露出去</strong>，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。用记事本打开 <code>id_rsa.pub</code>（<code>C:\Users\Administrator\.ssh</code>），得到ssh key 公钥。  </p></blockquote><blockquote><p><strong>2、</strong>为 Github 账户添加 ssh key 。登录 Github，展开个人头像的小三角，点<code>settings</code>，然后打开<code>SSH keys</code>菜单，点击<code>Add SSH key</code>新增密钥，填上标题。</p></blockquote><ul><li><strong>建立仓库</strong></li></ul><blockquote><p>填一下仓库名称，Initialize this repository with a README是可选的，<strong>建议在创建时选上</strong>，可以在后面省一个步骤。填好之后，点Create repository完成仓库的建立</p></blockquote><ul><li><strong>克隆仓库</strong></li></ul><blockquote><p><strong>如果是全新的项目没有任何文件，也可以不用克隆仓库，跳过这一步。</strong>点开 Git Shell，进入命令行。首先我们先要把 GitHub 上的我们新建的仓库 clone下来。在初始化版本库之前，先要确认认证的公钥是否正确</p></blockquote><pre><code>$ ssh -T git@github.com</code></pre><blockquote><p>如果收到成功的确认消息，就可以开始克隆远程仓库了（以我的一个项目为例）</p></blockquote><pre><code>$ git clone https://github.com/jerryhanjj/baike_spider.git</code></pre><blockquote><p>远程仓库的地址可以在自己的 <code>Github</code> 项目上找到（以我的为例）</p></blockquote><p><img src="http://i.imgur.com/ndADEqn.jpg" alt="获取远程仓库地址"></p><blockquote><p>克隆仓库之后就在文件夹中出现了项目文件夹及文件,进入项目文件夹，对其进行初始化</p></blockquote><pre><code>$ git init</code></pre><ul><li><strong>上传 README 文件</strong></li></ul><blockquote><p>如果在创建 <code>Github</code> 仓库时没有勾选创建 <code>README.md</code> 文件，则要先创建 <code>README.md</code> 文件，不然上传文件会报错。如果已经勾选，可以跳过此步骤。</p></blockquote><pre><code>$ git init$ touch README.md$ git add README.md$ git commit -m &apos;first_commit&apos;$ git remote add origin https://github.com/jerryhanjj/baike_spider.git$ git push origin master</code></pre><ul><li><strong>上传项目</strong></li></ul><blockquote><p>跟踪项目文件夹中的所有文件和文件夹</p></blockquote><pre><code>$ git add . </code></pre><blockquote><p>输入本次的提交说明，准备提交暂存区中的更改的已跟踪文件，单引号内为说明内容</p></blockquote><pre><code>$ git commit -m &apos;first_commit&apos;</code></pre><blockquote><p>关联远程仓库，添加后，远程库的名字就是 <code>origin</code>，这是 <code>Git</code> 默认的叫法，也可以改成别的，但是 <code>origin</code> 这个名字一看就知道是远程库。</p></blockquote><pre><code>$ git remote add origin https://github.com/jerryhanjj/baike_spider.git</code></pre><blockquote><p>如果关联出现错误 <code>fatal: remote origin already exists</code>，则执行下列语句再进行关联</p></blockquote><pre><code>git remote rm origin</code></pre><blockquote><p>把本地库的所有内容推送到远程库上</p></blockquote><pre><code>$ git push -u origin master</code></pre><blockquote><p>如果在推送时出现错误 <code>error:failed to push som refs to.......</code>，则执行下列语句</p></blockquote><pre><code>git pull origin master</code></pre><blockquote><p>将远程仓库 <code>Github</code> 上的文件拉下来合并之后重新推送上去</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置git/SSH&lt;/li&gt;
&lt;li&gt;建仓&lt;/li&gt;
&lt;li&gt;克隆&lt;/li&gt;
&lt;li&gt;上传项目&lt;code&gt;push&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Git" scheme="http://jerryhanjj.com/categories/Git/"/>
    
    
      <category term="git" scheme="http://jerryhanjj.com/tags/git/"/>
    
      <category term="github" scheme="http://jerryhanjj.com/tags/github/"/>
    
  </entry>
  
</feed>
